#pragma once

#include <SFGUI/Config.hpp>
#include <SFGUI/FastDelegate.hpp>

#include <map>

namespace sfg {

/** Widget signal.
 * Calls a function if something interesting is happening in a widget. Signals
 * can be connected to multiple endpoints. An endpoint may be a free or member
 * function.
 *
 * For free functions, just pass the function's pointer to Connect(). For
 * member functions (methods) specify the class, method name and object.
 * Examples:\n
 * \code
 * widget->OnLeftClick.Connect( &my_callback ); // Free function binding.
 * widget->OnLeftClick.Connect( &MyClass::MyCallback, this ); // Method binding.
 * \endcode
 *
 */
class SFGUI_API Signal {
	public:
		typedef std::size_t SignalID; //!< Signal ID type.

		/** Ctor.
		 */
		Signal();

		/** Dtor.
		 */
		~Signal();

		/** Connect to free function.
		 * @param delegate Free function.
		 * @return Connection serial, use for disconnecting.
		 */
		unsigned int Connect( Delegate delegate );

		/** Connect to non-static member function.
		 * @param function Function.
		 * @param object Object pointer.
		 * @return Connection serial, use for disconnecting.
		 */
		template <class Class>
		unsigned int Connect( void(Class::*function)(), Class* object );

		/** Disconnect signal.
		 * @param serial Serial generated by Connect().
		 */
		void Disconnect( unsigned int serial );

		/** Emit.
		 */
		void operator()() const;

		/** Generate a GUID for a signal.
		 * @return Signal GUID.
		 */
		static SignalID GetGUID();

	private:
		typedef std::map<unsigned int, Delegate> DelegateMap;

		static unsigned int m_serial;
		DelegateMap* m_delegates;

		static SignalID m_last_guid;
};

/** Widget signal container
 * Should only be used internally to store signals.
 * Needed to reduce memory consumption of widgets without any connected handlers.
 */
class SFGUI_API SignalContainer {
	public:
		/** Ctor.
		 */
		SignalContainer();

		/** Dtor.
		 */
		~SignalContainer();

		/** Access signal.
		 * @param id Signal ID.
		 * @return Reference to the requested signal.
		 */
		Signal& operator[]( const Signal::SignalID& id );

		/** Emit signal.
		 * @param id Signal ID.
		 */
		void Emit( const Signal::SignalID& id );

	private:
		typedef std::map<Signal::SignalID, Signal> SignalMap;

		SignalMap* m_signals;
};

}

#include "Signal.inl"
